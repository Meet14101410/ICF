# Save this as app_econsent.py
from flask import Flask, request, jsonify, render_template
from datetime import datetime
import json
import os
import uuid # For generating unique IDs for consent records

app = Flask(__name__)

# --- In a real application, this would be a secure database ---
# Using a simple JSON file for mock storage
CONSENT_RECORDS_FILE = 'consent_records.json'

def load_consent_records():
    if os.path.exists(CONSENT_RECORDS_FILE):
        with open(CONSENT_RECORDS_FILE, 'r') as f:
            return json.load(f)
    return []

def save_consent_records(records):
    with open(CONSENT_RECORDS_FILE, 'w') as f:
        json.dump(records, f, indent=4)

# -----------------------------------------------------------------

@app.route('/')
def serve_consent_form():
    # You would place the HTML code above in a 'templates' folder as 'econsent_form.html'
    return render_template('econsent_form.html')

@app.route('/submit-econsent', methods=['POST'])
def submit_econsent():
    if request.method == 'POST':
        try:
            # Assuming data is sent as JSON from the JavaScript fetch()
            data = request.json
            if not data:
                return jsonify({"error": "No data provided"}), 400

            participant_signature = data.get('participantSignature')
            consent_date_str = data.get('consentDate')
            consent_time_str = data.get('consentTime')
            icf_version = data.get('icfVersion')
            ip_address = data.get('ipAddress')
            browser_info = data.get('browserInfo')
            # In a real system, you'd get participant_id, investigator_id, study_site_id etc.
            # For demonstration, let's assume a dummy participant ID
            participant_id = "PART-" + str(uuid.uuid4())[:8].upper()

            if not all([participant_signature, consent_date_str, icf_version]):
                return jsonify({"error": "Missing required consent fields"}), 400

            # Generate a unique consent record ID
            consent_record_id = str(uuid.uuid4())

            # Simulate timestamp of server receipt for audit trail
            server_receipt_datetime = datetime.now().isoformat()

            consent_record = {
                "consent_record_id": consent_record_id,
                "participant_id": participant_id, # Link to actual participant record
                "icf_version": icf_version,
                "participant_signature_text": participant_signature, # For demo, this is just text
                "consent_date_client": consent_date_str,
                "consent_time_client": consent_time_str,
                "server_receipt_datetime": server_receipt_datetime,
                "ip_address_client": ip_address,
                "browser_info_client": browser_info,
                "status": "CONSENTED",
                # In a real system, more details for 21 CFR Part 11 compliance:
                # - Biometric data if applicable
                # - Cryptographic hash of the document content at time of signing
                # - Certificate chain for digital signature
                # - User authentication details (e.g., username of investigator/delegate)
            }

            records = load_consent_records()
            records.append(consent_record)
            save_consent_records(records)

            print(f"E-Consent recorded for Participant ID: {participant_id}, ICF Version: {icf_version}")
            print(f"Signature: {participant_signature}")

            return jsonify({"message": "Consent recorded successfully", "consent_record_id": consent_record_id}), 200

        except Exception as e:
            print(f"Error processing eConsent: {e}")
            return jsonify({"error": "Internal server error", "details": str(e)}), 500

@app.route('/view-consent-records')
def view_consent_records():
    records = load_consent_records()
    # In a real system, this would be a more sophisticated UI
    return jsonify(records)

if __name__ == '__main__':
    # To run:
    # 1. pip install flask
    # 2. Save the HTML code above as 'templates/econsent_form.html'
    # 3. python app_econsent.py
    # 4. Open http://127.0.0.1:5000/ in your browser
    # 5. After submitting, check console or http://127.0.0.1:5000/view-consent-records
    app.run(debug=True)
